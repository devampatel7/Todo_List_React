{"version":3,"sources":["Todo.js","Tasks.js","TextBox.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","todos","todo","setTodos","setCompTodos","comptodos","className","value","text","completed","onClick","e","filter","el","id","Tasks","filterTodos","map","TextBox","inputText","setInputText","todoID","setID","setStatus","onChange","target","type","preventDefault","App","useState","status","setfilterTodos","useEffect","concat","FilterHandler","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8b95dfd6.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Todo({todos, todo, setTodos, setCompTodos, comptodos}){\n\n    const deleteHandler = (e) => {\n       // const index = todos.indexOf(todo);\n        //todos.splice(index, 1);\n        if(todo.completed){\n            setCompTodos(comptodos.filter( (el) => (el.id!==todo.id )));\n        }\n        else\n        setTodos(todos.filter( (el) => (el.id !== todo.id )));\n        \n       \n        \n    }\n\n    const completeHandler = (e) => {\n\n       if(todo.completed!== true){\n        todo.completed = true;\n        //setTodos(todos.filter( (el) => ( el.completed === false  )));\n        //const index = todos.indexOf(todo);\n        setTodos(todos.filter( (el) => ( el.completed === false  )));\n        setCompTodos([\n            ...comptodos, todo\n        ])\n    }\n\n    }\n\n    return(\n       <div className=\"bar\">\n           \n           <li value = {todo.text} className = {`${todo.completed ? \"completed\": \"todo-item\"}`}> {todo.text} </li>\n           <button onClick = {completeHandler} className = \"checkBtn\"> Done </button>\n           <button onClick = {deleteHandler} className = \"trashBtn\"> Delete</button>\n           \n       </div>\n    );\n}\n\nexport default Todo;","import React from 'react';\nimport './App.css';\nimport Todo from './Todo';\n\nfunction Tasks ({todos, setTodos, comptodos, setCompTodos, filterTodos}){\n\n\n    return(\n        <div className = 'todo-container'>\n          <ul className = 'todo-list'>\n            { filterTodos.map( (todo)=> (\n                <Todo todo = {todo} todos = {todos} setTodos ={setTodos} comptodos = {comptodos} setCompTodos = {setCompTodos} />\n            ) )\n\n            }\n\n          </ul>\n        </div>\n    );\n\n}\n\nexport default Tasks;","import React from 'react';\nimport './App.css';\n//Form Class\n\nfunction TextBox({ inputText, setInputText, todos, setTodos, todoID, setID, setStatus}){\n    \n     const inputTextHandler = (e) =>{\n         setInputText(e.target.value);\n\n     }\n\n     const TodoHandler = (e) => {\n\n        e.preventDefault(); //prevents reloading after each submission\n\n         setTodos([\n             ...todos, {text: inputText, completed: false, id: todoID } \n         ]); //copy the remaining items and make a new object in the end\n         \n         \n         setID(todoID+1);\n         setInputText(\"\"); // reset the input text back to empty because the actual content is in the todos object\n\n         \n     }\n\n   \n     \n    const selectHandler = (e) =>{\n\n         setStatus(e.target.value);\n\n    }\n\n\n    return(\n    <form>\n        \n        <input value = {inputText} onChange={inputTextHandler} type=\"text\" className=\"todo-input\" />\n        <button onClick = {TodoHandler} type=\"submit\" className=\"submitBtn\"> ADD </button>\n         <select  onChange = {selectHandler}  className = \"optionSelect\">\n                <option value = \"All\"  className = \"opt1\"> All</option>\n                <option value = \"Incomplete\"  className = \"opt2\"> Incomplete</option>\n                <option  value = \"Completed\" className = \"opt3\"> Completed</option>\n\n         </select>\n\n\n\n\n    </form>    \n    );\n}\n\nexport default TextBox;","import React, {useState, useEffect} from 'react';\nimport Tasks from './Tasks';\nimport TextBox from './TextBox';\n\nimport './App.css';\n\n\n\n\nfunction App() {\n  \nconst [inputText, setInputText] = useState(\"\");\n\nconst [todos, setTodos] = useState([]);\n\nconst [todoID, setID] = useState(0);\n\nconst [comptodos, setCompTodos] = useState([]);\n\nconst [status, setStatus] = useState(\"All\");\n\nconst [filterTodos, setfilterTodos] = useState([]);\n\n\nconst FilterHandler = (e) =>{\n\n  switch(status){\n    case \"Completed\":\n      setfilterTodos(comptodos);\n      break;\n    case \"Incomplete\":\n      setfilterTodos(todos);\n      break;\n    default:\n      setfilterTodos(todos.concat(comptodos));\n      break;\n  }\n}\n\nuseEffect(()=>{\n  FilterHandler();\n}, [status, todos, comptodos]);\n\n  return (\n\n    <div className=\"App\">\n      <h1 >Todo List</h1>\n      <h2 className = \"credit\"> by Devam Patel</h2>\n      < TextBox \n      inputText = {inputText} \n      setInputText = {setInputText}\n      todos = {todos}\n      setTodos = {setTodos}\n      todoID = {todoID}\n      setID = {setID}\n      setStatus = {setStatus}\n       />\n      \n      \n      < Tasks \n      todos={todos} \n      setTodos={setTodos} \n      comptodos={comptodos} \n      setCompTodos={setCompTodos} \n      filterTodos = {filterTodos}\n      />\n      \n     \n    \n    \n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}